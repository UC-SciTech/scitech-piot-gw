version: "3"

# sub-systems in containers
services:
  # nginx proxy manager (npm)
  # npm:
  #   image: jwilder/nginx-proxy
  #   container_name: npm
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./env/npm/certs:/etc/nginx/certs:ro
  #     - ./env/npm/vhost.d:/etc/nginx/vhost.d
  #     - ./env/npm/conf.d:/etc/nginx/conf.d
  #     - /var/run/docker.sock:/tmp/docker.sock:ro

  # hostapd
  # https://github.com/J-Siu/docker_hostapd/tree/master
  # https://gitlab.com/hartek/autowlan
  hostapd:
    container_name: hostapd
    build:
      context: ./hostapd
      dockerfile: hostapd.dockerfile
    command: ["/bin/sh", "sleep 60 && /usr/sbin/hostapd -B /hostapd.conf"]
    network_mode: "host"
    cap_add:
      - NET_ADMIN
    privileged: true
    environment:
      AP_IP_ADDRESS: '${AP_IP_ADDRESS}'
    volumes:
      - ./env/hostapd/hostapd.conf:/hostapd.conf:ro
      - ./env/hostapd/interfaces.hostapd:/etc/network/interfaces:ro
    restart: unless-stopped

  # pihole
  # More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    network_mode: "host"
    # ports:
    #   - "53:53/tcp"
    #   - "53:53/udp"
    #   - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
    #   - "8080:80/tcp"
    environment:
      TZ: 'Australia/Sydney'
      WEBPASSWORD: '${PIHOLE_WEBPASSWORD}'
      INTERFACE: 'wlan0'
      WEB_PORT: '8080' # moved from 80 to avoid conflict with homer
    # Volumes store your data between container upgrades
    volumes:
      - './env/pihole/pihole:/etc/pihole'
      - './env/pihole/dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped

  # basicstation LoRa gateway
  # https://github.com/xoseperez/basicstation/tree/master
  basicstation:
    image: xoseperez/basicstation:latest
    container_name: basicstation
    privileged: true
    network_mode: host # required to read main interface MAC instead of virtual one
    environment:
      MODEL: "SX1302"
      TC_KEY: "${TC_KEY}"
    restart: unless-stopped

  # mosquitto MQTT broker
  # https://hub.docker.com/_/eclipse-mosquitto
  # mosquitto:
  #   container_name: mosquitto
  #   image: eclipse-mosquitto:latest
  #   ports:
  #     - '1883:1883' # for MQTT
  #     - '9001:9001' # for MQTT over Websocket
  #   # volumes:
  #   #   - './env/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro'
  #   restart: unless-stopped

  # emqx MQTT broker
  emqx:
    container_name: emqx
    image: emqx/emqx:latest
    ports:
      - '1883:1883' # for MQTT
      - '8083:8083' # for MQTT over Websocket
      - '8883:8883' # for MQTT over SSL
      - '8084:8084' # for MQTT over Websocket/SSL
      - '18083:18083' # for the dashboard
    volumes:
      - './env/emqx/etc/emqx.conf:/opt/emqx/etc/emqx.conf'
      - './env/emqx/data:/opt/emqx/data'
      # - './env/emqx/log:/opt/emqx/log'
    restart: unless-stopped

  # InfluxDB time series database from the TICK stack
  influxdb:
    container_name: influxdb
    image: influxdb:latest
    ports:
      - '8086:8086'
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    volumes:
      - './env/influxdb:/var/lib/influxdb2'
    restart: unless-stopped

  # telegraf collector for influxdb
  telegraf:
    container_name: telegraf
    image: telegraf:latest
    volumes:
      - './env/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro'
    depends_on:
      - influxdb
      - emqx
    restart: unless-stopped

  # home-assistant home automation platform
  # https://docs.linuxserver.io/images/docker-homeassistant/
  homeassistant:
    image: lscr.io/linuxserver/homeassistant:latest
    container_name: homeassistant
    network_mode: host # ui on port 8123
    privileged: true
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Sydney/Australia
    volumes:
      - ./env/homeassistant:/config
    restart: unless-stopped

  # Node-RED nodejs based block editor automation framework
  # https://nodered.org/docs/
  nodered:
    container_name: nodered
    image: nodered/node-red:latest
    group_add:
      - dialout
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0" # for zigbee2mqtt
    environment:
      - TZ=Sydney/Australia
    ports:
      - '1880:1880'
    volumes:
      - './env/nodered:/data'
    restart: unless-stopped

  # heimdall homepage to keep track of all the services
  # heimdall:
  #   container_name: heimdall
  #   image: lscr.io/linuxserver/heimdall:latest
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Sydney/Australia
  #   ports:
  #     # - '8080:80'
  #     - '8443:443'
  #   volumes:
  #     - './env/heimdall:/config'
  #   restart: unless-stopped

  # homer homepage to keep track of all the services
  homer:
    container_name: homer
    image: b4bz/homer:latest
    user: '1000:1000'
    environment:
      - TZ=Sydney/Australia
    ports:
      - '80:8080'
    volumes:
      - './env/homer/assets/config.yml:/www/assets/config.yml'
    restart: unless-stopped

  # portainer to manage docker containers
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - 9443:9443
    restart: unless-stopped

volumes:
  portainer_data:
